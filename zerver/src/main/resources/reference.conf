hochgi.example {
  zerver {
    
    #########
    ## SSL ##
    #########
    
    # provider = <?>  # SSL provider: either 'jdk' or 'openssl'
    # behaviour = <?> # HttpBehaviour: one of 'accept', 'fail', 'redirect'
    # data = <?>      # either 'generate' which means: A new public/private key pair will be generated and self-signed. Useful for testing/developer mode.
                      # or an object that looks like either:
                      #
                      # {
                      #   certPath = <?>
                      #   keyPath = <?>
                      # }
                      #
                      # or:
                      #
                      # {
                      #   certResource = <?>
                      #   keyResource = <?>
                      # }
                      #
                      # And controls whether cert and key are loaded from a file, or a resource.
  
    binding-host = 0.0.0.0
    binding-port = 9080

    accept-continue = false
    keep-alive = true
    request-decompression = no
  
    # response-compression = <?> # an object with 2 optional fields:
                                 #
                                 # {
                                 #   content-threshold = <?> # int32
                                 #   options = []
                                 # }
                                 #
                                 # Where `options` is an array of objects,
                                 # each object has a `type` with value that is either 'gzip' or 'deflate', 
                                 # and 3 optional numeric fields: 
                                 #   level: [0-9] # defines compression level, 1 yields the fastest compression and 9 yields the best compression. 0 means no compression.
                                 #   bits: [9-15] # defines windowBits, The base two logarithm of the size of the history buffer. The value should be in the range 9 to 15 inclusive. Larger values result in better compression at the expense of memory usage
                                 #   mem:   [1-9] # defines memlevel, How much memory should be allocated for the internal compression state. 1 uses minimum memory and 9 uses maximum memory. Larger values result in better and faster compression at the expense of memory usage
    request-streaming {
      enabled = false
      maximum-content-length = 102400
    }
    max-header-size = 8192
    log-warning-on-fatal-error = true
    graceful-shutdown-timeout = 10 seconds
  
    # idle-timeout = <?> 
  }
}
